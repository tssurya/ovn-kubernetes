/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");

you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/network-policy-api/apis/v1alpha1"
)

// AdminNetworkPolicyLister helps list AdminNetworkPolicies.
// All objects returned here must be treated as read-only.
type AdminNetworkPolicyLister interface {
	// List lists all AdminNetworkPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AdminNetworkPolicy, err error)
	// AdminNetworkPolicies returns an object that can list and get AdminNetworkPolicies.
	AdminNetworkPolicies(namespace string) AdminNetworkPolicyNamespaceLister
	AdminNetworkPolicyListerExpansion
}

// adminNetworkPolicyLister implements the AdminNetworkPolicyLister interface.
type adminNetworkPolicyLister struct {
	indexer cache.Indexer
}

// NewAdminNetworkPolicyLister returns a new AdminNetworkPolicyLister.
func NewAdminNetworkPolicyLister(indexer cache.Indexer) AdminNetworkPolicyLister {
	return &adminNetworkPolicyLister{indexer: indexer}
}

// List lists all AdminNetworkPolicies in the indexer.
func (s *adminNetworkPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.AdminNetworkPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdminNetworkPolicy))
	})
	return ret, err
}

// AdminNetworkPolicies returns an object that can list and get AdminNetworkPolicies.
func (s *adminNetworkPolicyLister) AdminNetworkPolicies(namespace string) AdminNetworkPolicyNamespaceLister {
	return adminNetworkPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AdminNetworkPolicyNamespaceLister helps list and get AdminNetworkPolicies.
// All objects returned here must be treated as read-only.
type AdminNetworkPolicyNamespaceLister interface {
	// List lists all AdminNetworkPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AdminNetworkPolicy, err error)
	// Get retrieves the AdminNetworkPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AdminNetworkPolicy, error)
	AdminNetworkPolicyNamespaceListerExpansion
}

// adminNetworkPolicyNamespaceLister implements the AdminNetworkPolicyNamespaceLister
// interface.
type adminNetworkPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AdminNetworkPolicies in the indexer for a given namespace.
func (s adminNetworkPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AdminNetworkPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AdminNetworkPolicy))
	})
	return ret, err
}

// Get retrieves the AdminNetworkPolicy from the indexer for a given namespace and name.
func (s adminNetworkPolicyNamespaceLister) Get(name string) (*v1alpha1.AdminNetworkPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("adminnetworkpolicy"), name)
	}
	return obj.(*v1alpha1.AdminNetworkPolicy), nil
}
