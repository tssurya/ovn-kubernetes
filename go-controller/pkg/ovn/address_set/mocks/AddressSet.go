// Code generated by mockery v2.40.0. DO NOT EDIT.

package mocks

import (
	ovsdb "github.com/ovn-org/libovsdb/ovsdb"
	mock "github.com/stretchr/testify/mock"

	sets "k8s.io/apimachinery/pkg/util/sets"
)

// AddressSet is an autogenerated mock type for the AddressSet type
type AddressSet struct {
	mock.Mock
}

// AddIPs provides a mock function with given fields: ips
func (_m *AddressSet) AddIPs(ips sets.Set[string]) error {
	ret := _m.Called(ips)

	if len(ret) == 0 {
		panic("no return value specified for AddIPs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sets.Set[string]) error); ok {
		r0 = rf(ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddIPsReturnOps provides a mock function with given fields: ips
func (_m *AddressSet) AddIPsReturnOps(ips sets.Set[string]) ([]ovsdb.Operation, error) {
	ret := _m.Called(ips)

	if len(ret) == 0 {
		panic("no return value specified for AddIPsReturnOps")
	}

	var r0 []ovsdb.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(sets.Set[string]) ([]ovsdb.Operation, error)); ok {
		return rf(ips)
	}
	if rf, ok := ret.Get(0).(func(sets.Set[string]) []ovsdb.Operation); ok {
		r0 = rf(ips)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ovsdb.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(sets.Set[string]) error); ok {
		r1 = rf(ips)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIPs provides a mock function with given fields: ips
func (_m *AddressSet) DeleteIPs(ips sets.Set[string]) error {
	ret := _m.Called(ips)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIPs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sets.Set[string]) error); ok {
		r0 = rf(ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIPsReturnOps provides a mock function with given fields: ips
func (_m *AddressSet) DeleteIPsReturnOps(ips sets.Set[string]) ([]ovsdb.Operation, error) {
	ret := _m.Called(ips)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIPsReturnOps")
	}

	var r0 []ovsdb.Operation
	var r1 error
	if rf, ok := ret.Get(0).(func(sets.Set[string]) ([]ovsdb.Operation, error)); ok {
		return rf(ips)
	}
	if rf, ok := ret.Get(0).(func(sets.Set[string]) []ovsdb.Operation); ok {
		r0 = rf(ips)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ovsdb.Operation)
		}
	}

	if rf, ok := ret.Get(1).(func(sets.Set[string]) error); ok {
		r1 = rf(ips)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destroy provides a mock function with given fields:
func (_m *AddressSet) Destroy() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetASHashNames provides a mock function with given fields:
func (_m *AddressSet) GetASHashNames() (string, string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetASHashNames")
	}

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func() (string, string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// GetIPs provides a mock function with given fields:
func (_m *AddressSet) GetIPs() ([]string, []string) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIPs")
	}

	var r0 []string
	var r1 []string
	if rf, ok := ret.Get(0).(func() ([]string, []string)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() []string); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *AddressSet) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetIPs provides a mock function with given fields: ips
func (_m *AddressSet) SetIPs(ips sets.Set[string]) error {
	ret := _m.Called(ips)

	if len(ret) == 0 {
		panic("no return value specified for SetIPs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sets.Set[string]) error); ok {
		r0 = rf(ips)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAddressSet creates a new instance of AddressSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddressSet(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddressSet {
	mock := &AddressSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
